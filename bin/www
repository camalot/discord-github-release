#!/usr/bin/env node
"use strict";

const path = require('path');
// let watch = require('watch');
// let reload = require('reload');
const fs = require('fs');
const envFile = path.join(__dirname, '../.env');
try {
  fs.accessSync(envFile, fs.F_OK);
  console.log("loading .env file");
  require('dotenv').config({path: envFile});
} catch (e) {
  // no env file
}
const config = require('../config');
/**
 * Module dependencies.
 */
const app = require('../server');
const debug = require('debug')('discord-github-releases:server');
const http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */
let normalizePort = (val) => {
	let port = parseInt(val, 10);
	if (isNaN(port)) {
		return val;
	}
	if (port >= 0) {
		return port;
	}
	return false;
};


/**
 * Event listener for HTTP server "error" event.
 */
let onError = (error) => {
	if (error.syscall !== 'listen') {
		throw error;
	}
	let bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
};

/**
 * Event listener for HTTP server "listening" event.
 */
let onListening = () => {
	let startup = require('../lib/init')
	return startup.init()
		.then(() => {
			console.log("init success");
			let addr = server.address();
			let bind = typeof addr === 'string'
				? 'pipe ' + addr
				: 'port ' + addr.port;
			debug('Listening on ' + bind);
		})
		.catch((err) => {
			if (err) {
				console.error(err);
			}
		});
};


/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
let server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
